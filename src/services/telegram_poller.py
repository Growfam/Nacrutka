"""
Telegram Polling Service - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ—Ç—Ä–∏–º—É—î –Ω–æ–≤—ñ –ø–æ—Å—Ç–∏ –∫–æ–ª–∏ –±–æ—Ç —î –∞–¥–º—ñ–Ω–æ–º
"""
import asyncio
import logging
from datetime import datetime
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes

from src.config import settings
from src.database.connection import db

logger = logging.getLogger(__name__)


class TelegramPoller:
    """–û—Ç—Ä–∏–º—É—î –Ω–æ–≤—ñ –ø–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ Telegram updates"""

    def __init__(self):
        self.db = db
        self.app = None
        self.processed_channels = {}  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –æ–±—Ä–æ–±–ª–µ–Ω–∏–π –ø–æ—Å—Ç –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É

    async def setup(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Telegram polling"""
        self.app = Application.builder().token(settings.telegram_bot_token).build()

        # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –Ω–æ–≤–∏—Ö –ø–æ—Å—Ç—ñ–≤ –≤ –∫–∞–Ω–∞–ª–∞—Ö
        channel_handler = MessageHandler(
            filters.UpdateType.CHANNEL_POST,
            self.handle_new_post
        )
        self.app.add_handler(channel_handler)

        logger.info("‚úÖ Telegram polling configured")

    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ polling"""
        await self.app.initialize()
        await self.app.start()
        logger.info("üü¢ Started polling for new posts")

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ polling
        await self.app.updater.start_polling(
            allowed_updates=['channel_post'],  # –¢—ñ–ª—å–∫–∏ –ø–æ—Å—Ç–∏ –∑ –∫–∞–Ω–∞–ª—ñ–≤
            drop_pending_updates=True  # –Ü–≥–Ω–æ—Ä—É—î–º–æ —Å—Ç–∞—Ä—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        )

    async def handle_new_post(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç—É –≤ –∫–∞–Ω–∞–ª—ñ"""

        if not update.channel_post:
            return

        message = update.channel_post
        channel_telegram_id = message.chat.id
        channel_username = message.chat.username or str(channel_telegram_id)
        post_id = message.message_id

        logger.info(f"üì® New post #{post_id} in @{channel_username}")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –Ω–∞—à –∫–∞–Ω–∞–ª
        channel = await self.db.fetchrow("""
            SELECT id, username, is_active, process_old_posts
            FROM channels 
            WHERE telegram_id = $1 OR username = $2
        """, channel_telegram_id, channel_username)

        if not channel:
            logger.debug(f"Channel @{channel_username} not tracked")
            return

        if not channel['is_active']:
            logger.debug(f"Channel @{channel_username} is inactive")
            return

        channel_id = channel['id']
        process_old_posts = channel['process_old_posts']

        # –ö–†–ò–¢–ò–ß–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –ø–µ—Ä—à–∏–π –∑–∞–ø—É—Å–∫
        existing_posts_count = await self.db.fetchval(
            "SELECT COUNT(*) FROM posts WHERE channel_id = $1",
            channel_id
        )

        # –Ø–∫—â–æ —Ü–µ –ü–ï–†–®–ò–ô –∑–∞–ø—É—Å–∫ —ñ process_old_posts = 0
        if existing_posts_count == 0 and process_old_posts == 0:
            # –ù–ï –æ–±—Ä–æ–±–ª—è—î–º–æ —Ü–µ–π –ø–æ—Å—Ç, —Ç—ñ–ª—å–∫–∏ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —è–∫ baseline
            logger.info(f"‚ö†Ô∏è First run for @{channel_username} with process_old_posts=0")
            logger.info(f"Setting baseline at post #{post_id}, NOT processing")

            await self.db.execute("""
                INSERT INTO posts (channel_id, post_id, post_url, is_processed)
                VALUES ($1, $2, $3, true)  -- is_processed = true, —â–æ–± –ù–ï —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                ON CONFLICT (channel_id, post_id) DO NOTHING
            """, channel_id, post_id, f"https://t.me/{channel_username}/{post_id}")

            self.processed_channels[channel_id] = post_id
            return

        # –Ø–∫—â–æ —Ü–µ –ø–µ—Ä—à–∏–π –∑–∞–ø—É—Å–∫ —ñ —Ç—Ä–µ–±–∞ –æ–±—Ä–æ–±–∏—Ç–∏ —Å—Ç–∞—Ä—ñ –ø–æ—Å—Ç–∏
        if existing_posts_count == 0 and process_old_posts > 0:
            logger.info(f"üì¶ First run: processing {process_old_posts} old posts")

            # –û–±—Ä–æ–±–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –ø–æ—Å—Ç–∏ (–≤—ñ–¥ post_id –Ω–∞–∑–∞–¥)
            for i in range(process_old_posts):
                old_post_id = post_id - i
                if old_post_id > 0:
                    await self.save_and_process_post(
                        channel_id,
                        channel_username,
                        old_post_id
                    )
            return

        # –ó–≤–∏—á–∞–π–Ω–∏–π —Ä–µ–∂–∏–º - –æ–±—Ä–æ–±–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –ù–û–í–Ü –ø–æ—Å—Ç–∏
        post_url = f"https://t.me/{channel_username}/{post_id}"

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤–∏–π –ø–æ—Å—Ç
        result = await self.db.execute("""
            INSERT INTO posts (channel_id, post_id, post_url, is_processed)
            VALUES ($1, $2, $3, false)
            ON CONFLICT (channel_id, post_id) DO NOTHING
            RETURNING id
        """, channel_id, post_id, post_url)

        if result and 'INSERT' in result:
            logger.info(f"‚úÖ Saved new post: {post_url}")

            # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç—É
            await self.create_orders_for_post(channel_id, post_id, post_url)
        else:
            logger.debug(f"Post {post_url} already exists")

    async def save_and_process_post(self, channel_id: int, channel_username: str, post_id: int):
        """–ó–±–µ—Ä—ñ–≥–∞—î –ø–æ—Å—Ç —Ç–∞ —Å—Ç–≤–æ—Ä—é—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""

        post_url = f"https://t.me/{channel_username}/{post_id}"

        result = await self.db.execute("""
            INSERT INTO posts (channel_id, post_id, post_url, is_processed)
            VALUES ($1, $2, $3, false)
            ON CONFLICT (channel_id, post_id) DO NOTHING
            RETURNING id
        """, channel_id, post_id, post_url)

        if result and 'INSERT' in result:
            logger.info(f"üìù Processing old post: {post_url}")
            await self.create_orders_for_post(channel_id, post_id, post_url)

    async def create_orders_for_post(self, channel_id: int, post_id: int, post_url: str):
        """–°—Ç–≤–æ—Ä—é—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Å—Ç—É –∑–≥—ñ–¥–Ω–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""

        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∫–∞–Ω–∞–ª—É
        config_row = await self.db.fetchrow("""
            SELECT config FROM channel_config 
            WHERE channel_id = $1
        """, channel_id)

        if not config_row or not config_row['config']:
            logger.warning(f"No config for channel {channel_id}")
            return

        config = config_row['config']

        # –û—Ç—Ä–∏–º—É—î–º–æ ID –ø–æ—Å—Ç—É –∑ –ë–î
        post_record = await self.db.fetchrow("""
            SELECT id FROM posts 
            WHERE channel_id = $1 AND post_id = $2
        """, channel_id, post_id)

        if not post_record:
            logger.error(f"Post not found: {post_url}")
            return

        post_db_id = post_record['id']
        orders_created = 0

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è views
        if config.get('views', {}).get('enabled'):
            for portion in config['views'].get('portions', []):
                if portion.get('service_id') and portion.get('quantity'):
                    status = 'scheduled' if portion.get('delay', 0) > 0 else 'pending'

                    await self.db.execute("""
                        INSERT INTO ready_orders (
                            post_id, channel_id, service_id, service_type,
                            quantity, runs, interval, link, status, portion_number
                        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
                    """, post_db_id, channel_id, portion['service_id'], 'views',
                        portion['quantity'], portion.get('runs', 1),
                        portion.get('interval', 0), post_url, status,
                        portion.get('number', 1))

                    orders_created += 1

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è reactions
        if config.get('reactions', {}).get('enabled'):
            for reaction in config['reactions'].get('emojis', []):
                if reaction.get('service_id') and reaction.get('quantity'):
                    await self.db.execute("""
                        INSERT INTO ready_orders (
                            post_id, channel_id, service_id, service_type,
                            quantity, runs, interval, link, status, emoji
                        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
                    """, post_db_id, channel_id, reaction['service_id'], 'reactions',
                        reaction['quantity'], reaction.get('runs', 1),
                        reaction.get('interval', 0), post_url, 'pending',
                        reaction.get('emoji'))

                    orders_created += 1

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è reposts
        if config.get('reposts', {}).get('enabled'):
            reposts = config['reposts']
            if reposts.get('service_id') and reposts.get('quantity'):
                status = 'scheduled' if reposts.get('delay', 0) > 0 else 'pending'

                await self.db.execute("""
                    INSERT INTO ready_orders (
                        post_id, channel_id, service_id, service_type,
                        quantity, runs, interval, link, status
                    ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
                """, post_db_id, channel_id, reposts['service_id'], 'reposts',
                    reposts['quantity'], reposts.get('runs', 1),
                    reposts.get('interval', 0), post_url, status)

                orders_created += 1

        # –ü–æ–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Å—Ç —è–∫ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π
        await self.db.execute("""
            UPDATE posts 
            SET is_processed = true, processed_at = $1
            WHERE id = $2
        """, datetime.utcnow(), post_db_id)

        logger.info(f"‚úÖ Created {orders_created} orders for post {post_url}")

    async def stop(self):
        """–ó—É–ø–∏–Ω–∫–∞ polling"""
        if self.app:
            await self.app.updater.stop()
            await self.app.stop()
            await self.app.shutdown()
            logger.info("üî¥ Stopped polling")